#include <iostream>
#include <cmath>
using namespace std;

class Graph{
	public:
		char table[256][256];
		int M,N;   //M是column N是row 
		Graph(){
			for(int i=0;i<256;i++){
				for(int j=0;j<256;j++){
					table[i][j] = '0';
				}
			}
		}
		void setpixel(int x,int y,int w,int k,char c){
			for(int i=y;i<y+k;i++){            //++i跟i++沒差 
 				for(int j=x;j<x+w;j++){
 					table[i][j] = c;
				 }
			}
		}
		void output(){
			for(int i=1;i<=N;i++){
				for(int j=1;j<=M;j++){
					cout << table[i][j];
				}
				cout << endl;
			}
		}
};

void DFS(Graph& graph,int x, int y, char curpixel, char C){    //遞迴 找到底 
	if(curpixel==C)
		return;   //因為是void型態 可加可不加 
	graph.table[y][x] = C;
	
	if(x+1 <= graph.M && graph.table[y][x+1] == curpixel)
		DFS(graph,x+1,y,curpixel,C);
		
	if(x-1 >= 1       && graph.table[y][x-1] == curpixel)
		DFS(graph,x-1,y,curpixel,C);
		
	if(y+1 <= graph.N && graph.table[y+1][x] == curpixel)
		DFS(graph,x,y+1,curpixel,C);
		
	if(y-1 >= 1       && graph.table[y-1][x] == curpixel)
		DFS(graph,x,y-1,curpixel,C);
			
}

int main(){
	Graph graph;
	char cmd,C;
	int M,N,X1,X2,Y1,Y2;
	string Name,ignore;
	while((cin >> cmd) && cmd !='X'){
		switch (cmd){
			case 'I':
					cin >> M >> N;
					graph.M = M;
					graph.N = N;    //不加break是希望可以執行到case'C' 清空陣列裡的資料
			case 'C':
					graph.setpixel(1,1,graph.M,graph.N,'0');
					break;
			case 'L':
					cin >> X1 >> Y1 >> C;
					graph.setpixel(X1,Y1,1,1,C);
					break;
			case 'V':
					cin >> X1 >> Y1 >> Y2 >> C;
					graph.setpixel(X1,min(Y1,Y2),1,abs(Y1-Y2)+1,C);
					break;
			case 'H':
					cin >> X1 >> X2 >> Y1 >> C;
					graph.setpixel(min(X1,X2),Y1,abs(X1-X2)+1,1,C);
					break;
			case 'K':
					cin >> X1 >> Y1 >> X2 >> Y2 >> C;
					graph.setpixel(min(X1,X2),min(Y1,Y2),abs(X1-X2)+1,abs(Y1-Y2)+1,C);
					graph.setpixel(X1,Y1,X2-X1+1,Y2-Y1+1,C);     //不懂這行的意義在哪 
					break;
			case 'F':
					cin >> X1 >> Y1 >> C;
					DFS(graph,X1,Y1,graph.table[Y1][X1],C);
					break;
			case 'S':
					cin >> Name;
					cout << Name << endl;
					graph.output();
					break;
			default:
					getline(cin,ignore);
					break;
				
		}
	}
	
}
